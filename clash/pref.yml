# 该部分主要涉及到的内容为 全局的节点排除或保留 、各配置文件的基础  
# 其他设置项目可以保持默认或者在知晓作用的前提下进行修改
common:
# API 模式，设置为 true 以防止直接加载本地订阅或直接提供本地文件，若访问这些内容则需要接上 &token=。（多用于部署公共订阅转换服务时）
# 当值为 false 时, 每次更新配置都会读取 主程序目录中的配置文件 , 为 true 时则仅启动时读取
  api_mode: false
# 用于访问相对隐私的接口（如 /getprofile）   api_access_token=passwd
  api_access_token: password
# 无 %URL% 参数时，默认加载的订阅链接， 不需要 URLEncode。 如果有多个链接，仍然需要使用 "|" 分隔，支持文件/url
# default_url=https://dler.cloud/subscribe/ABCDE?clash=vmess 
# 此时订阅链接: http://127.0.0.1:25500/sub?target=clash  等同于: http://127.0.0.1:25500/sub?target=clash&url=https%3A%2F%2Fdler.cloud%2Fsubscribe%2FABCDE%3Fclash%3Dvmess
  default_url: []
# 设置是否为输出的订阅添加 insert_url 中所有的节点
# 当值为 true 时, 会在输出的订阅中添加 insert_url 中所有的节点, 为 false 时不添加。
  enable_insert: true
# 当 enable_insert 的值为 true 时，无论是否具有 %URL% 参数时，都会在添加订阅前加入的节点， 不需要 URLEncode。
# 如果有多个节点，仍然需要使用 "|" 分隔，支持 单个节点/订阅链接  支持 SS/SSR/Vmess 以及类 TG 代理的 HTTP/Socks 链接
# insert_url=ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpwYXNzd29yZA@www.example.com:1080#Example insert_url=ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpwYXNzd29yZA@www.example.com:1080#Example
  insert_url: []
# 设置为输出的订阅添加 insert_url 中的节点时是否添加至所有节点前方  当值为 true 时, 会在输出的订阅中所有节点的前方添加 insert_url 中所有的节点, 为 false 时在后方添加。
  prepend_insert_url: true
# 排除匹配到的节点，支持正则匹配
  exclude_remarks: ["(到期|剩余流量|时间|官网|产品|平台)"]
# 仅保留匹配到的节点，支持正则匹配  include_remarks=(?<=美).*(BGP|GIA|IPLC)
  include_remarks: []
# 设置为所有节点使用自定义的js代码进行筛选 当值为 true 时, 为所有节点使用自定义的js代码进行筛选, 为 false 时不使用。
  enable_filter: false
# 为所有节点使用自定义的js函数进行筛选 可设置为js代码内容，也可为本地js文件的路径 js函数包括一个参数，即一个节点，函数返回为true时保留该节点，返回为false时丢弃该节点
# #仅保留加密方式为chacha20的节点  filter_script=function filter(node) {\n    if(node.EncryptMethod.includes('chacha20'))\n        return true;\n    return false;\n}
# 或者使用本地文件 filter_script="path:/path/to/script.js"
  filter_script: ""
# 如果未指定外部配置文件，则将其设置为默认值。支持 本地文件 和 在线URL
  default_external_config: "" # config/example_external_config.yml
# 限制外部配置可以使用的本地配置文件基础路径。 外部配置只可以使用base文件夹下的本地配置文件基础
  base_path: base
# 生成的 Clash 配置文件模板。支持 本地文件 和 在线URL 
# clash_rule_base=base/GeneralClashConfig.yml # 加载本地文件作为模板
# clash_rule_base=https://github.com/ACL4SSR/ACL4SSR/raw/master/Clash/GeneralClashConfig.yml 加载ACL4SSR的 Github 中相关文件作为模板
  clash_rule_base: base/all_base.tpl  
# 生成的 Surge 配置文件模板，用法同上
  surge_rule_base: base/all_base.tpl
# 生成的 Surfboard 配置文件模板，用法同上
  surfboard_rule_base: base/all_base.tpl
# 生成的 Mellow 配置文件模板，用法同上
  mellow_rule_base: base/all_base.tpl
# quan
  quan_rule_base: base/all_base.tpl
# quanx
  quanx_rule_base: base/all_base.tpl
# 生成的 Loon 配置文件模板，用法同上
  loon_rule_base: base/all_base.tpl
# 生成的 sssub 配置文件模板，用法同上
  sssub_rule_base: base/all_base.tpl
# 更新 外部配置文件 时是否使用代理  填写 NONE 或者空白禁用，或者填写 SYSTEM 使用系统代理  支持HTTP 或 SOCKS 代理(http:// https:// socks4a:// socks5://) 支持CORS代理(cors：)，详细参见cors-anywhere、cloudflare-cors-anywhere等
# proxy_config=SYSTEM # 使用系统代理
# proxy_config=socks5://127.0.0.1:1080 # 使用本地的 1080 端口进行 SOCKS5 代理
# proxy_config=cors:https://cors-anywhere.herokuapp.com/ # 使用CORS代理
  proxy_config: SYSTEM
# 更新 规则 时是否使用代理，用法同上
  proxy_ruleset: SYSTEM
# 更新 原始订阅 时是否使用代理，用法同上
  proxy_subscription: NONE
# 节点名称是否需要加入属性，设置为 true 时在节点名称前加入 [SS] [SSR] [VMess] 以作区别，默认为 false    设置为 true时: [SS] 香港中转 [VMess] 美国 GIA
  append_proxy_type: false


# 该部分主要涉及到的内容为 从节点名中提取用户信息的规则 相关设置项目建议保持默认或者在知晓作用的前提下进行修改
userinfo:
# 从节点名中提取流量信息及显示的规则  使用方式：从节点提取信息的正则表达式|显示信息的正则表达式
  stream_rule: 
  - {match: "^剩余流量：(.*?)\\|总流量：(.*)$", replace: "total=$2&left=$1"}
  - {match: "^剩余流量：(.*?) (.*)$", replace: "total=$1&left=$2"}
  - {match: "^Bandwidth: (.*?)/(.*)$", replace: "used=$1&total=$2"}
  - {match: "^.*剩余(.*?)(?:\\s*?)@(?:.*)$", replace: "total=$1"}
  - {match: "^.*?流量:(.*?) 剩:(?:.*)$", replace: "total=$1"}
# 从节点名中提取时间信息的规则 使用方式：从节点提取信息的正则表达式|显示信息的正则表达式
  time_rule:
  - {match: "^过期时间：(\\d+)-(\\d+)-(\\d+) (\\d+):(\\d+):(\\d+)$", replace: "$1:$2:$3:$4:$5:$6"}
  - {match: "^到期时间(:|：)(\\d+)-(\\d+)-(\\d+)$", replace: "$1:$2:$3:0:0:0"}
  - {match: "^Smart Access expire: (\\d+)/(\\d+)/(\\d+)$", replace: "$1:$2:$3:0:0:0"}
  - {match: "^.*?流量:(?:.*?) 剩:(.*?)天$", replace: "left=$1d"}


# 该部分主要涉及到的内容为 开启节点的 UDP 及 TCP Fast Open 、节点的重命名 、重命名节点后的排序    相关设置项目建议保持默认或者在知晓作用的前提下进行修改
node_pref:
# 为节点打开 UDP 模式，设置为 true 时打开，默认为 false    当不清楚机场的设置时请勿调整此项。
#  udp_flag: false
# 为节点打开 TFO (TCP Fast Open) 模式，设置为 true 时打开，默认为 false    当不清楚机场的设置时请勿调整此项。
#  tcp_fast_open_flag: false
# 关闭 TLS 节点的证书检查，设置为 true 时打开，默认为 false      请勿随意将此设置修改为 true
#  skip_cert_verify_flag: false
# 为节点增加tls1.3开启参数，设置为 true 时打开，默认为 false    请勿随意将此设置修改为 true
#  tls13_flag: false
# 对生成的订阅中的节点按节点名进行 A-Z 的排序，设置为 true 时打开，默认为 false
  sort_flag: false
# 对生成的订阅中的节点按自定义js函数进行排序   可设置为js代码内容，也可为本地js文件的路径  js函数包括2个参数，即2个节点，函数返回为true时，节点a排在节点b的前方   具体细节参照 [common] 部分filter_script中的介绍
# sort_script=function compare(node_a, node_b) {\n    return node_a.Remark > node_b.Remark;\n} 
# sort_script="path:/path/to/script.js"
  sort_script: ""
# 排除当前 target= 不支持的节点类型，设置为 true 时打开，默认为 false   可以考虑设置为 true，从而在一定程度上避免出现兼容问题
  filter_deprecated_nodes: false
# 在 header 里的加入流量信息 (Quanx, Surge 等读取后可以显示流量信息通知)，设置为 true 时打开，默认为 true
  append_sub_userinfo: true
# 启用 Clash 的新区块名称 (proxies, proxy-groups, rules)，设置为 true 时打开，默认为 true
  clash_use_new_field_name: true
# 在Clash配置文件中proxies的生成风格 可选的值为block、 flow、 compact，默认为flow
# 风格示例：
# Block:
#   - name: name1
#     key: value
#   - name: name2
#     key: value
# Flow:
#   - {name: name1, key: value}
#   - {name: name2, key: value}
# Compact:
#  [{name: name1, key: value},{name: name2, key: value}]
  clash_proxies_style: flow
# 重命名节点，支持正则匹配  使用方式：原始命名@重命名   可以使用自定义的js函数进行重命名  具体细节参照 [common] 部分filter_script中的介绍
# rename_node=中国@中  rename_node=!!GROUPID=0!!中国@中  指定此重命名仅在第一个订阅的节点中生效     rename_node=\(?((x|X)?(\d+)(\.?\d+)?)((\s?倍率?:?)|(x|X))\)?@(倍率:$1)  
# rename_node=!!script:function rename(node) {\n  const geoinfo = JSON.parse(geoip(node.Hostname));\n  if(geoinfo.country_code == "CN")\n    return "CN " + node.Remark;\n}
  rename_node:
#  - {match: "\\(?((x|X)?(\\d+)(\\.?\\d+)?)((\\s?倍率?)|(x|X))\\)?", replace: "$1x"}
#  - {script: "function rename(node){}"} 
#  - {script: "path:/path/to/script.js"}
  - {import: snippets/rename_node.txt}


# 该部分主要涉及到的内容为 订阅文件的更新地址
managed_config:
# 是否将 '#!MANAGED-CONFIG' 信息附加到 Surge 或 Surfboard 配置，设置为 true 时打开，默认为 true
  write_managed_config: true
# 具体的 '#!MANAGED-CONFIG' 信息，地址前缀不用添加 "/"。 Surge 或 Surfboard 会向此地址发出更新请求，同时本地 ruleset 转 url 会用此生成/getruleset链接。 局域网用户需要将此处改为本程序运行设备的局域网 IP
# 例如: managed_config_prefix = http://192.168.1.5:25500
  managed_config_prefix: "http://127.0.0.1:25500"
# 托管配置更新间隔，确定配置将更新多长时间，单位为秒    每 86400 秒更新一次（即一天）
  config_update_interval: 86400
# 如果 config_update_strict 为 true，则 Surge 将在上述间隔后要求强制更新。
  config_update_strict: false
# 用于重写 Quantumult X 远程 JS 中的设备 ID，该 ID 在 Quantumult X 设置中自行查找
  quanx_device_id: ""
# 为 Surge 添加 SSR 的支持路径
surge_external_proxy:
  surge_ssr_path: "" # /usr/bin/ssr-local
  resolve_hostname: true


emojis:
# 是否在节点名称前加入下面自定义的 Emoji，设置为 true 时打开，默认为 true
  add_emoji: true
# 是否移除原有订阅中存在的 Emoji，设置为 true 时打开，默认为 true
  remove_old_emoji: true
# 在匹配到的节点前添加自定义 emojis，支持正则匹配
# 例如: rule=(流量|时间|应急),⌛time  rule=(美|美国|United States),🇺🇸      rule=!!GROUPID=0!!(流量|时间|应急),⌛time  指定此 Emoji 规则仅在第一个订阅的节点中生效
  rules:
#  - {match: "(流量|时间|应急)", emoji: "🏳️‍🌈"}
#  - {script: "function getEmoji(node){}"}
#  - {script: "path:/path/to/script.js"}
  - {import: snippets/emoji.txt}

# 如果你对原本订阅自带的规则不满意时，可以使用如下配置
rulesets:
# 启用自定义规则集的总开关，设置为 true 时打开，默认为 true
  enabled: true
# 覆盖原有规则，即 [common] 中 xxx_rule_base 中的内容，设置为 true 时打开，默认为 false
  overwrite_original_rules: false
# 根据请求执行规则集更新，设置为 true 时打开，默认为 false
  update_ruleset_on_request: false
# 从本地或 url 获取规则片段   格式为 Group name,[type:]URL[,interval] 或 Group name,[]Rule 
# 支持的type（类型）包括：surge, quanx, clash-domain, clash-ipcidr, clash-classic
# type留空时默认为surge类型的规则   [] 前缀后的文字将被当作规则，而不是链接或路径，主要包含 []GEOIP 和 []MATCH(等同于 []FINAL)。
# ruleset=🍎 苹果服务,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list  表示引用 https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list 规则 且将此规则指向 [proxy_group] 所设置 🍎 苹果服务 策略组
# ruleset=Domestic Services,clash-domain:https://ruleset.dev/clash_domestic_services_domains,86400 表示引用clash-domain类型的 https://ruleset.dev/clash_domestic_services_domains 规则  规则更新间隔为86400秒  且将此规则指向 [proxy_group] 所设置 Domestic Services 策略组
# ruleset=🎯 全球直连,rules/NobyDa/Surge/Download.list  表示引用本地 rules/NobyDa/Surge/Download.list 规则 且将此规则指向 [proxy_group] 所设置 🎯 全球直连 策略组
# ruleset=🎯 全球直连,[]GEOIP,CN  表示引用 GEOIP 中关于中国的所有 IP 且将此规则指向 [proxy_group] 所设置 🎯 全球直连 策略组
# ruleset=!!import:snippets/rulesets.txt  表示引用本地的snippets/rulesets.txt规则
  rulesets:
#  - {rule: "GEOIP,CN", group: "DIRECT"}
#  - {ruleset: "rules/LocalAreaNetwork.list", group: "DIRECT"}
#  - {ruleset: "surge:rules/LocalAreaNetwork.list", group: "DIRECT"}
#  - {ruleset: "quanx:https://raw.githubusercontent.com/ConnersHua/Profiles/master/Quantumult/X/Filter/Advertising.list", group: "Advertising", interval: 86400}
#  - {ruleset: "clash-domain:https://ruleset.dev/clash_domestic_services_domains", group: "Domestic Services", interval: 86400}
#  - {ruleset: "clash-ipcidr:https://ruleset.dev/clash_domestic_services_ips", group: "Domestic Services", interval: 86400}
#  - {ruleset: "clash-classic:https://raw.githubusercontent.com/DivineEngine/Profiles/master/Clash/RuleSet/China.yaml", group: "DIRECT", interval: 86400}
  - {import: snippets/rulesets.txt}


# 为 Clash 、Mellow 、Surge 以及 Surfboard 等程序创建策略组, 可用正则来筛选节点  [] 前缀后的文字将被当作引用策略组
proxy_groups:
  custom_proxy_group:
#  - {name: UrlTest, type: url-test, rule: [".*"], url: http://www.gstatic.com/generate_204, interval: 300, tolerance: 100, timeout: 5}
#  - {name: Proxy, type: select, rule: [".*"]}
#  - {name: group1, type: select, rule: ["!!GROUPID=0"]}
#  - {name: v2ray, type: select, rule: ["!!GROUP=V2RayProvider"]}
#  - {import: snippets/groups_forcerule.txt}
#  - {name: ssid group, type: ssid, rule: ["default_group", "celluar=group0,ssid1=group1,ssid2=group2"]}
  - {import: snippets/groups.txt}


# 此部分用于指定 模板 中的部分值
template:
# 对子模板文件的所在位置(即模板文件中使用 {% include "xxx.tpl" %} 引入的模板)做出路径限制
  template_path: ""
# 名称可以为任意非本程序默认的参数，用来对模板中的值进行判断或在模板中使用其定义的参数
  globals:
  - {key: clash.http_port, value: 7890}
  - {key: clash.socks_port, value: 7891}
  - {key: clash.allow_lan, value: true}
  - {key: clash.log_level, value: info}
  

# 设置访问接口的别名，也可以用来缩短URI。 访问别名时会将传递的所有参数附加到别名目标的参数中。 
# 精简接口步骤（此类别名默认在 pref 中启用） 当设置 /clash=/sub?target=clash 时： 访问 127.0.0.1/clash?url=xxx 即跳转至 127.0.0.1/sub?target=clash&url=xxx
# 精简外部配置路径  当设置 /mysub=/getprofile?name=aaa&token=bbb 时：   访问 127.0.0.1/mysub 即跳转至 127.0.0.1/getprofile?name=aaa&token=bbb
aliases:
  - {uri: /v, target: /version}
  - {uri: /clash, target: "/sub?target=clash"}
  - {uri: /clashr, target: "/sub?target=clashr"}
  - {uri: /surge, target: "/sub?target=surge"}
  - {uri: /quan, target: "/sub?target=quan"}
  - {uri: /quanx, target: "/sub?target=quanx"}
  - {uri: /mellow, target: "/sub?target=mellow"}
  - {uri: /surfboard, target: "/sub?target=surfboard"}
  - {uri: /loon, target: "/sub?target=loon"}
  - {uri: /ss, target: "/sub?target=ss"}
  - {uri: /ssd, target: "/sub?target=ssd"}
  - {uri: /sssub, target: "/sub?target=sssub"}
  - {uri: /ssr, target: "/sub?target=ssr"}
  - {uri: /v2ray, target: "/sub?target=v2ray"}
  - {uri: /trojan, target: "/sub?target=trojan"}



# 该部分主要涉及到的内容为 定时执行js文件中的代码
# 在服务器运行期间定期执行的任务。 使用方式 任务名称`Cron表达式`JS文件路径`超时时间(s)
tasks:
#  - name: tick
#    cronexp: "0/10 * * * * ?"
#    path: tick.js
#    timeout: 3



# 此部分通常保持默认即可
server:
# 绑定到 Web 服务器的地址，将地址设为 0.0.0.0，则局域网内设备均可使用
  listen: 0.0.0.0
# 绑定到 Web 服务器地址的端口，默认为 25500
  port: 25500
# Web服务器的根目录，可以为包含静态页面的文件夹，留空则为关闭
  serve_file_root: ""


# 此部分通常保持默认即可
advanced:
# 日志级别，可选值有：fatal error warn info debug verbose
  log_level: info
# 是否打印debug信息
  print_debug_info: false
# 最大挂起连接数
  max_pending_connections: 10240
# 最大线程数
  max_concurrent_threads: 2
# 规则集数量上限，0表示无限
  max_allowed_rulesets: 0
# 规则数量上限，0表示无限
  max_allowed_rules: 0
# subconverter下载外部文件时的文件大小上限，超过时直接忽略该文件，单位bytes，0表示无限
  max_allowed_download_size: 0
# 是否启用缓存
  enable_cache: false
# 当启用缓存时，订阅文件的缓存时间
  cache_subscription: 60
# 当启用缓存时，外部配置文件的缓存时间
  cache_config: 300
# 当启用缓存时，规则集的缓存时间
  cache_ruleset: 21600
# script脚本是否使用干净上下文
  script_clean_context: true
# 并行下载规则集
  async_fetch_ruleset: false
# 跳过失败的链接，继续转换而不是直接返回错误
  skip_failed_links: false
